process.containerEngine = 'singularity'
trace.overwrite = true
report.overwrite = true
timeline.overwrite = true
//process.debug = true

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

profiles {
    standard {
        singularity.enabled = true
        singularity.autoMounts = true

        params {
            max_memory = 224.GB
            max_cpus = 32
            max_time = '72.h'
            publish_dir_mode = 'copy'
            publish_dir_overwrite = 'true'
        }
    }

    dev {
        //loading singularity containers takes a long time.
        // won't be needed if running a stub
        singularity.enabled = false        
        singularity.autoMounts = false

        params {
            max_memory = 224.GB
            max_cpus = 32
            max_time = '72.h'
            publish_dir_mode = 'copy'
            publish_dir_overwrite = 'false'
        }
    }

    cluster {
        singularity.enabled = true
        singularity.autoMounts = true
        runOptions = '--bind /nemo --bind /flask'

        process {
            executor = 'slurm'
            queue = 'ncpu'
        }

        params {
            max_memory = 224.GB
            max_cpus = 32
            max_time = '72.h'
            publish_dir_mode = 'copy'
            publish_dir_overwrite = 'true'
        }
    }
}

process {
    withName:PVACSEQ {
        container = '/nemo/project/proj-tracerX/working/CMELA/alex/work/cpi.nextflow/singularity/pvactools_4.1.1.sif'
        cpus   = { check_max( 8                  , 'cpus'    ) }
        memory = { check_max( 8.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
    withName:VEP_ANNO {
        container = '/nemo/project/proj-tracerX/working/CMELA/alex/work/cpi.nextflow/singularity/vep110.sif'
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 3.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 2.h  * task.attempt, 'time'    ) }
    }
    withName:RUN_PYCLONE {
        //container = '/nemo/project/proj-tracerX/working/CMELA/alex/work/cpi.nextflow/singularity/pyclone_v2.sif'
        cpus   = { check_max( 5                  , 'cpus'    ) }
        memory = { check_max( 100.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 120.h  * task.attempt, 'time'    ) }
    }
    withName:RUN_PYCLONEVI {
        container = '/nemo/project/proj-tracerX/working/CMELA/alex/work/cpi.nextflow/singularity/pyclonevi-image.sif'
        cpus   = { check_max( 5                  , 'cpus'    ) }
        memory = { check_max( 100.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h  * task.attempt, 'time'    ) }
    }
    withName:RUN_CONIPHER {
        container = '/nemo/project/proj-tracerX/working/CMELA/alex/work/cpi.nextflow/singularity/conipher-image.sif'
        cpus   = { check_max( 8                  , 'cpus'    ) }
        memory = { check_max( 30.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 48.h  * task.attempt, 'time'    ) }
    }
    withName:RUN_PAIRTREE {
        container = '/nemo/project/proj-tracerX/working/CMELA/alex/work/cpi.nextflow/singularity/pairtree-image.sif'
        cpus   = { check_max( 8                  , 'cpus'    ) }
        memory = { check_max( 100.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h  * task.attempt, 'time'    ) }
    }
    withName:FACETS_SNP_PILEUP {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 10.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 5.h  * task.attempt, 'time'    ) }
    }
    withName:FACETS_RUN {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 10.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 5.h  * task.attempt, 'time'    ) }
    }
    withName:HLAHD {
        cpus   = { check_max( 8                  , 'cpus'    ) }
        memory = { check_max( 40.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h  * task.attempt, 'time'    ) }
    }
    withName:PREPARE_PYCLONE_INPUT {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 1.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 1.h  * task.attempt, 'time'    ) }
    }
    withName:MERGE_PYCLONE_INPUT_PER_PATIENT {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 1.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 1.h  * task.attempt, 'time'    ) }
    }
    withName:MERGE_FASTQ {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 1.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 1.h  * task.attempt, 'time'    ) }
    }
    withName:MUTECT2_FORCECALL {
        cpus   = { check_max( 4                  , 'cpus'    ) }
        memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 5.h  * task.attempt, 'time'    ) }
    }
    withName:MERGE_VCF {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 1.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 1.h  * task.attempt, 'time'    ) }
    }
    withName:NORMALIZE_FILTER_VCF {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 1.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 1.h  * task.attempt, 'time'    ) }
    }
}

params {
    // mela sample sheet
    //samplesheet = '/nemo/project/proj-tracerX/working/CMELA/alex/work/cpi.nextflow/pipelines/mela/mela.samplesheet.csv'

    // sarek sample sheet
    samplesheet = '/nemo/project/proj-tracerX/working/CMELA/alex/work/cpi.nextflow/pipelines/sarek/newsamplesheetpea020.csv'

    // sarek sample sheet 1 patient
    //samplesheet = '/nemo/project/proj-tracerX/working/CMELA/alex/work/cpi.nextflow/pipelines/sarek/samplesheet.1.patient.csv'

    sarek_output_dir = '/nemo/project/proj-tracerX/working/CMELA/alex/work/cpi.nextflow/pipelines/sarek/output_two_patients/'

    outputdir = '/nemo/project/proj-tracerX/working/CMELA/alex/work/cpi.nextflow/pipelines/mela/output_two_patients/'
    stub_data_dir = '/nemo/project/proj-tracerX/working/CMELA/alex/work/cpi.nextflow/pipelines/mela/stub_data/'

    hlahd_install_directory = '/nemo/project/proj-tracerX/working/CMELA/alex/work/cpi.nextflow/singularity/hlahd.1.7.0'

    vepcache = '/nemo/project/proj-tracerX/working/CMELA/alex/work/cpi.nextflow/vep_cache/'
    vepplugins = '/nemo/project/proj-tracerX/working/CMELA/alex/work/cpi.nextflow/singularity/pvac_vep_plugins'

    genome_reference = '/nemo/project/proj-tracerX/working/CMELA/alex/work/cpi.nextflow/igenome/Homo_sapiens/GATK/GRCh38/Sequence/WholeGenomeFasta/Homo_sapiens_assembly38.fasta'
    genome_index = genome_reference + '.fai'
    genome_dict = '/nemo/project/proj-tracerX/working/CMELA/alex/work/cpi.nextflow/igenome/Homo_sapiens/GATK/GRCh38/Sequence/WholeGenomeFasta/Homo_sapiens_assembly38.dict'
    genome_version = 'hg38'

    germline_resource = '/nemo/project/proj-tracerX/working/CMELA/alex/work/cpi.nextflow/igenome/Homo_sapiens/GATK/GRCh38/Annotation/GermlineResource/gnomAD.r2.1.1.GRCh38.PASS.AC.AF.only.vcf.gz'
    germline_resource_index = germline_resource + '.tbi'

    panel_of_normals = '/nemo/project/proj-tracerX/working/CMELA/alex/work/cpi.nextflow/igenome/Homo_sapiens/GATK/GRCh38/Annotation/GATKBundle/1000g_pon.hg38.vcf.gz'
    panel_of_normals_index = panel_of_normals + '.tbi'

    funcotator_data = '/nemo/project/proj-tracerX/working/CMELA/alex/work/cpi.nextflow/funcotator/funcotator_dataSources.v1.7.20200521s'

    conipher_prefix = 'PEA'
    stage = 'intitial'
}

//check_max function taken from nf-core
//ensures that resource requirements don't go over a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
